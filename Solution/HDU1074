#include <cstring>
#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
#include <_map>
#include <set>
#include <iostream>

using namespace std;

typedef long long ll;

const int INF = 2147483647;
const ll INF64 = 1e18;
const double EPS = 1e-15;
const double PI = 3.1415926;
const ll MOD = 1e9 + 7;

#define scd(x) scanf("%d", &(x))
#define scd2(x, y) scanf("%d %d", &(x), &(y))
#define prd(x) printf("%d", (x));
typedef struct {
	char name[102];
	int d;
	int c;
} Subject;

Subject subjects[17];
const int N = (1 << 15) + 7;
int dp[N];
int t[N];
int pre[N];


void print(int s){
	if(!s){
		return;
	}
	print(pre[s]);
	int k = 0;
	int z = s - pre[s];
	while(z > 1){
		k++;
		z >>= 1;
	}
	printf("%s\n", subjects[k].name);
}

int main() {
	int n;
	scanf("%d", &n);
	for(int i = 0; i < n; i++){
		int m;
		scanf("%d", &m);
		for(int j = 0; j < m; j++){
			scanf("%s %d %d", subjects[j].name, &subjects[j].d, &subjects[j].c);
		}
		memset(dp, 0x3f, sizeof(dp));
		dp[0] = 0;
		for(int j = 1; j < (1 << m); j++){
			for(int k = m - 1; k >= 0; k--){
				if(!(j & (1 << k)))
					continue;
				int z = j - (1 << k);
				t[j] = t[z] + subjects[k].c;
				int cost = t[j] - subjects[k].d;
				if(cost < 0)
					cost = 0;
				if(dp[z] + cost < dp[j]){
					dp[j] = dp[z] + cost;
					pre[j] = z;
				}
			}
		}
		printf("%d\n", dp[(1 << m) - 1]);
		print((1 << m) - 1);
	}
	return 0;
}