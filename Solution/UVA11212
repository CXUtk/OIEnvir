#include <cstring>
#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
#include <map>
#include <set>
using namespace std;

typedef long long ll;

const int INF = 2147483647;
const double EPS = 1e-15;
const double PI = 3.1415926;
const int MOD = 998244353;

int dr[4] = {-1, 0, 1, 0};
int dc[4] = {0, 1, 0, -1};

template<int N>
struct Factorial
{
	enum { Value = N * Factorial<N - 1>::Value };
};

template<>
struct Factorial<1>
{
	enum { Value = 1 };
};

int state[Factorial<9>::Value];
int n;
int arr[11];
int copyarr[11];
int fact[10];


int getcode(const int arrs[11]){
	int code = 0;
	for(int i = 0; i < n; i++){
		int cnt = 0;
		for(int j = i + 1; j < n; j++)
			if(arrs[j] < arrs[i])
				cnt++;
		code += fact[n - 1 - i] * cnt;
	}
	return code;
}

void reverseget(int code){
	bool vis[11];
	memset(vis, 0, sizeof(vis));
	for (int i = 0; i < n; i++)
	{
		int t = code / fact[n - i - 1];
		code %= fact[n - i - 1];
		int tot = 0;
		for(int j = 0; j < n; j++){
			if(!vis[j]) tot++;
			if(tot == t + 1){
				arr[i] = j + 1;
				vis[j] = true;
				break;
			}
		}
	}
}

void rearrange(int s1, int len, int s2){
	int i = 0;
	if(s2 < s1){
		while(i <= s2){
			copyarr[i] = arr[i];
			i++;
		}
		for(int j = s1; j < s1 + len; j++){
			copyarr[i++] = arr[j];
		}
		for(int j = s2 + 1; j < s1; j++){
			copyarr[i++] = arr[j];
		}
		for(int j = s1 + len; j < n; j++){
			copyarr[i++] = arr[j];
		}
	}
	else {
		while (i < s1) {
			copyarr[i] = arr[i];
			i++;
		}
		for (int j = s1 + len; j <= s2; j++) {
			copyarr[i++] = arr[j];
		}
		for (int j = s1; j < s1 + len; j++) {
			copyarr[i++] = arr[j];
		}
		while (i < n) {
			copyarr[i] = arr[i];
			i++;
		}
	}
}

void gen(){
	fact[0] = 1;
	for(int i = 1; i <= 9; i++){
		fact[i] = fact[i - 1] * i;
	}
}
int countH(){
	int h = 0;
	for(int i = 0; i < n; i++){
		if(copyarr[i] != i + 1)
			h++;
	}
	return h;
}

void testRR(int s1, int l, int s2){
	rearrange(s1, l, s2);
	printf("Test RR %d, %d, %d\n", s1, l, s2);
	for(int i = 0; i < n; i++){
		printf("%d ", copyarr[i]);
	}
	printf("\n");
}

int main() {
	gen();
	int CASE = 1;
	while(~scanf("%d", &n) && n){
		memset(state, 0x3f, sizeof(state));
		for(int i = 0; i < n; i++){
			scanf("%d", &arr[i]);
		}
		queue<int> Q;
		int c = getcode(arr);
		state[c] = 0;
		Q.push(c);
		while(!Q.empty()){
			auto p = Q.front();
			Q.pop();
			if(p == 0)
				continue;
			reverseget(p);

			for(int l = 1; l <= n - 1; l++){
				for(int i = 0; i + l < n; i++){
					for(int j = -1; j < n; j++){
						if(j >= i - 1 && j < i + l)
							continue;
						rearrange(i, l, j);
						int d = getcode(copyarr);
						if(state[p] + 1 <= n - 1 && 3 * state[p] + countH() <= 3 * (n - 1)
						   && state[d] > state[p] + 1) {
							state[d] = state[p] + 1;
							Q.push(d);
						}
					}
				}
			}
		}
		printf("CASE %d: %d\n", CASE++, state[0]);
	}
	return 0;
}


/*struct Pos {
	int x;
	int y;
	bool black;
	double rad;
	Pos() = default;
	Pos(int x, int y, bool b): x(x), y(y), black(b), rad(0.0){}

	bool operator < (const Pos &p) const {
		return this->rad < p.rad;
	}
};

struct Inv {
	int l;
	int r;
	int id;
	Inv() = default;
	Inv(int l, int r): l(l), r(r){}
	bool operator < (const Inv &p) const {
		return this->r < p.r;
	}
};

int cross(const Pos& a, const Pos& b){
	return a.x * b.y - a.y * b.x;
}

ll length(const Pos& v){
	return v.x * v.x + v.y * v.y;
}

bool colinear(const Pos& a, const Pos& b, const Pos& t){
	Pos v1 = {a.x - t.x, a.y - t.y, false};
	Pos v2 = {b.x - t.x, b.y - t.y, false};
	return !cross(v1, v2);
}

struct Cow{
	int score, money;
};

bool cmp(const Cow& a, const Cow& b){
	return a.score < b.score;
}*/


