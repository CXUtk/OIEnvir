
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <sstream>
#include <cmath>
#include <functional>
#include <stack>


using namespace std;

typedef long long ll;

const int INF = 2147483647;
const int INF2 = 0x3f3f3f3f;
const ll INF64 = 1e18;
const double EPS = 1e-15;
const double PI = 3.1415926;
const ll MOD = 1e9 + 7;

struct Pos {
	int x;
	int y;
	Pos() : x(0), y(0) {}
	Pos(int x, int y) : x(x), y(y) {}
};


inline int read() {
	int X = 0, w = 0;
	char ch = 0;
	while (!isdigit(ch)) {
		w |= ch == '-';
		ch = getchar();
	}
	while (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48), ch = getchar();
	return w ? -X : X;
}

int n;
Pos pos[100];
double dp[100][100];
double dis[100][100];
double dist(int i, int j){
	double d1 = pos[i].x - pos[j].x;
	double d2 = pos[i].y - pos[j].y;
	return sqrt(d1 * d1 + d2 * d2);
}
int main() {
#ifdef LOCALLL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
#endif
	while(~scanf("%d", &n)) {
		for (int i = 1; i <= n; i++){
			scanf("%d %d", &pos[i].x, &pos[i].y);
		}
		for(int i = 1; i < n - 1; i++){
			dp[n - 1][i] = dist(n - 1, n) + dist(i, n);
		}
		for(int i = 1; i <= n; i++){
			for(int j = i + 1; j <= n; j++){
				dis[i][j] = dis[j][i] = dist(i, j);
			}
		}
		for(int i = n - 2; i >= 2; i--){
			for(int j = 1; j < i; j++){
				dp[i][j] = min(dp[i + 1][j] + dis[i][i + 1], dp[i + 1][i] + dis[i + 1][j]);
			}
		}
		printf("%.2lf\n", dp[2][1] + dis[1][2]);
		memset(dis, 0, sizeof(dis));
	}
	return 0;
}

