#include <cstring>
#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
#include <_map>
#include <set>
#include <iostream>
using namespace std;

typedef long long ll;

const int INF = 2147483647;
const double EPS = 1e-15;
const double PI = 3.1415926;
const int MOD = 998244353;

int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};

vector<int> treee[300005];
int w[300005];
pair<double, int> cw[300005];
double tot[300005];
int c[300005];
int DOM, NUM;
void g(int(*)(int)){

}
int dfs(int u){
	int t = 1;
	double s = w[u];
	for(auto v : treee[u]){
		t += dfs(v);
		s += cw[v].first;
	}
	cw[u] = {s, u};
	tot[u] = s;
	return c[u] = t;
}

int cmp(pair<double, int>& a, pair<double, int>& b){
	return a.first > b.first;
}

void get(int u, double v){
	if(w[u] == v){
		DOM++;
		NUM += w[u];
	}
	for(auto z : treee[u]){
		get(z, v);
	}
}
int main() {
	int n;
	scanf("%d", &n);
	for(int i = 1; i <= n; i++){
		scanf("%d", &w[i]);
	}
	for(int i = 1; i <= n - 1; i++){
		int u, v;
		scanf("%d %d", &u, &v);
		treee[u].push_back(v);
	}
	dfs(1);
	sort(cw + 1, cw + n + 1, cmp);
	get(1, cw[1].first / c[cw[1].second]);
	printf("%d %d", NUM, DOM);
	return 0;
}